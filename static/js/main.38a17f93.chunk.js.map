{"version":3,"sources":["Movie.js","firebase.js","CommentList.js","App.js","serviceWorker.js","index.js"],"names":["Movie","currentMovie","this","props","className","title","onClick","handleClickLeft","src","img","alt","handleClickRight","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","CommentList","getComments","database","ref","on","response","updatedList","data","val","key","push","id","tag","voteCount","setState","comments","handleChange","event","userTag","target","value","handleClick","preventDefault","dbRef","userComment","movieID","state","upVoteOrDownVote","e","commentKey","isUp","tagToUpdate","find","comment","updatedComment","update","action","htmlFor","type","onChange","filter","sort","a","b","map","App","fetchPosters","imgPath","movieDataToGet","movie","axios","url","params","api_key","language","Promise","all","movieResults","movieList","forEach","movieResult","movieObj","original_title","poster_path","currentMovieIndex","movieChange","length","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.38a17f93.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Movie extends Component {\r\n\r\n    render() {\r\n        const { currentMovie } = this.props\r\n\r\n        return(\r\n            <div className=\"App wrapper\">\r\n                <section className=\"movie\">\r\n                    <h3>{currentMovie ? currentMovie.title : 'Movie Title Not Found'}</h3>\r\n                    <div className=\"movieBox\">\r\n                        <button onClick={this.props.handleClickLeft} className=\"bigButt\">\r\n                            <i className=\"fas fa-chevron-circle-left\"></i>\r\n                        </button>\r\n                        <div className=\"imgContainer\">\r\n                            <img src={currentMovie ? currentMovie.img : 'No poster = no posts. Try another'} alt={`The promotional poster for the movie ${currentMovie.title}`} />\r\n                        </div>\r\n                        <button onClick={this.props.handleClickRight} className=\"bigButt\">\r\n                            <i className=\"fas fa-chevron-circle-right\"></i>\r\n                        </button>\r\n                    </div>\r\n                    <p className=\"winner\">{currentMovie ? currentMovie.title : 'Movie Title Not Found'}</p>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Movie;","// firebase.js\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n// Initialize Firebase\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDvlxTwfSMPppXfDKDaMX-SE0aREjUt0w4\",\r\n    authDomain: \"uptag-623f0.firebaseapp.com\",\r\n    databaseURL: \"https://uptag-623f0.firebaseio.com\",\r\n    projectId: \"uptag-623f0\",\r\n    storageBucket: \"uptag-623f0.appspot.com\",\r\n    messagingSenderId: \"369383170296\",\r\n    appId: \"1:369383170296:web:5475a44309b2b9d8bddb0d\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// this exports the CONFIGURED version of firebase\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport firebase from './firebase';\r\n\r\n\r\n// Create Component\r\nclass CommentList extends Component {\r\n    constructor() {\r\n        super();\r\n        // Set empty comments array and clear userTag input\r\n        this.state = {\r\n            comments: [],\r\n            userTag: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Call the getComments function\r\n        this.getComments();\r\n    }\r\n    \r\n    getComments = () => {\r\n        // Establish a reference to database\r\n        const dbRef = firebase.database().ref();\r\n\r\n        // On\r\n        dbRef.on('value', (response) => {\r\n            // New variable to store updated comment list\r\n            const updatedList = [];\r\n            // Store the value of the resonse we get back in a variable\r\n            const data = response.val();\r\n            // Push all of the new information as an object into the updatedList array\r\n            for (let key in data) {\r\n                updatedList.push({\r\n                    key: key,\r\n                    id: data[key].id,\r\n                    tag: data[key].tag,\r\n                    voteCount: data[key].voteCount,\r\n                })\r\n            }\r\n            // Update state to include new comments (updatedList array)\r\n            this.setState({\r\n                comments: updatedList\r\n            });\r\n        });\r\n    }\r\n\r\n    // Create a function to target the value passed into the input\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            // update userTag with the value\r\n            userTag: event.target.value\r\n        })\r\n    }\r\n\r\n    handleClick = (event) => {\r\n        // Prevent the page from refreshing\r\n        event.preventDefault();\r\n        // Create a variable to reference the database\r\n        const dbRef = firebase.database().ref();\r\n\r\n        // Create an object to store the data received from input\r\n        const userComment = {\r\n            id: this.props.movieID,\r\n            tag: this.state.userTag,\r\n            voteCount: 0,\r\n        };\r\n        // Push the data to the database\r\n        dbRef.push(userComment);\r\n        // Clear the input\r\n        this.setState({\r\n            userTag: ''\r\n        })\r\n    }\r\n\r\n    // Could not properly complete logic on voting system ***\r\n    // Create a function to vote\r\n    upVoteOrDownVote = (e, commentKey, isUp) => {\r\n        e.preventDefault();\r\n        // Find the tage by finding the comments key and making sure it matches the passed argument\r\n        const tagToUpdate = this.state.comments.find(comment => comment.key = commentKey);\r\n        \r\n        const updatedComment = {\r\n            ...tagToUpdate,\r\n            voteCount: isUp ? ++tagToUpdate.voteCount : --tagToUpdate.voteCount\r\n        };\r\n        const dbRef = firebase.database().ref(commentKey);\r\n        // Push the data to the database\r\n        dbRef.update({ voteCount: updatedComment.voteCount })\r\n        /* const updatedComments = [...this.state.comments.filter(comment => comment.key !== commentKey), updatedComment];\r\n        this.setState({\r\n            comments: updatedComments\r\n        }); */\r\n\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"commentList\">\r\n                <form action=\"submit\">\r\n                    <label htmlFor=\"newTag\" className=\"visuallyHidden\">tag it</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"newTag\"\r\n                        onChange={this.handleChange}\r\n                        value={this.state.userTag}\r\n                    />\r\n                    <button onClick={this.handleClick} className=\"tag\">tag it</button>\r\n                </form>\r\n                <ul>\r\n                    {this.state.comments.filter(tag => {\r\n                        return tag.id === this.props.movieID;\r\n                    }).sort(function(a,b){\r\n                        return b.voteCount - a.voteCount\r\n                    }).map((tag) => {\r\n                        return(\r\n                            <li key={tag.key}>\r\n                                <div>\r\n                                    <p className=\"votes\" id=\"voteCount\"><span className=\"score\">{tag.voteCount}</span></p>\r\n                                </div>\r\n\r\n                                <p className=\"tagged\">{tag.tag}</p>\r\n\r\n                                <div className=\"voteButtBox\">\r\n                                    <button className=\"voteButt\" onClick={e => this.upVoteOrDownVote(e, tag.key, true)}>\r\n                                        <i className=\"fas fa-chevron-circle-up\"></i>\r\n                                    </button>\r\n                                    <button className=\"voteButt\" onClick={e => this.upVoteOrDownVote(e, tag.key)}>\r\n                                        <i className=\"fas fa-chevron-circle-down\"></i>\r\n                                    </button>\r\n                                </div>\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CommentList;","import React, { Component } from 'react';\nimport Movie from './Movie';\nimport CommentList from './CommentList';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      movieList: [],\n      currentMovie: {},\n      currentMovieIndex: 0,\n    }\n  }\n\n  componentDidMount() {\n    this.fetchPosters();\n  }\n\n  fetchPosters = async () => {\n\n    // TMDB API key\n    const apiKey = '3a88c3b23db1c59c856ca8f70aa6fb16';\n    const imgPath = 'http://image.tmdb.org/t/p/w185';\n    // Array with movie IDs to fetch movies\n    const movieIDs = [\n      594084, // guestHouse\n      694919, // moneyPlane\n      550412, // halloweenJack\n      582218, // psych2\n      726739, // catsAndDogs\n    ];\n    // create an array of promises for the movies in the moviesID array\n    const movieDataToGet = movieIDs.map(movie => {\n      return axios({\n        url: `https://api.themoviedb.org/3/movie/${movie}`,\n        params: {\n          api_key: apiKey,\n          language: 'en-US',\n        }\n      });\n    })\n    // wait for all the promises for the movies to be completed\n    const movieResults = await Promise.all(movieDataToGet);\n    // place holder movieList to later be used to set the movieList state\n    const movieList = [];\n    // for each movie in movieResults create an object of the id, title, and img\n    // and push the object into the 'staged' movieList array\n    movieResults.forEach(movieResult => {\n      const movie = movieResult.data;\n      const movieObj = {\n        id: movie.id,\n        title: movie.original_title,\n        img: imgPath + movie.poster_path\n      }\n      movieList.push(movieObj)\n    });\n      this.setState({\n        movieList,\n        currentMovie: movieList[this.state.currentMovieIndex]\n      })\n  }\n\n  movieChange = (movie) => {\n    this.setState({\n      currentMovie: movie\n    })\n  }\n\n  handleClickRight = () => {\n    let currentMovieIndex = this.state.currentMovieIndex + 1;\n    if (currentMovieIndex >= this.state.movieList.length) {\n      currentMovieIndex = 0;\n    }\n    this.setState({\n      currentMovieIndex,\n      currentMovie: this.state.movieList[currentMovieIndex]\n    })\n  }\n\n  handleClickLeft = () => {\n    let currentMovieIndex = this.state.currentMovieIndex - 1;\n    if (currentMovieIndex < 0) {\n      currentMovieIndex = this.state.movieList.length - 1\n    }\n    this.setState({\n      currentMovieIndex,\n      currentMovie: this.state.movieList[currentMovieIndex]\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App wrapper\">\n        <Movie\n        movieChange={this.movieChange}\n        currentMovie={this.state.currentMovie}\n        handleClickLeft={this.handleClickLeft}\n        handleClickRight={this.handleClickRight}\n        />\n        <CommentList\n        movieID={this.state.currentMovie.id}\n        />\n        <div className=\"juno\">\n          <a href=\"https://junocollege.com/\">\n            <span className=\"junoImg\">Created</span>\n            <span className=\"junoImg\">at</span>\n            <span className=\"junoImg\">Juno</span>\n            <span className=\"junoImg\">College</span>\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}